
'use server';
/**
 * @fileOverview Generates a detailed care plan for a plant, including specific tasks.
 *
 * - generateDetailedCarePlan - A function that generates a detailed plant care plan with tasks.
 * - GenerateDetailedCarePlanInput - The input type for the generateDetailedCarePlan function.
 * - GenerateDetailedCarePlanOutput - The return type for the generateDetailedCarePlan function.
 * - AIGeneratedTask - The type for individual tasks generated by the AI.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateDetailedCarePlanInputSchema = z.object({
  plantCommonName: z.string().describe('The common name of the plant.'),
  plantScientificName: z.string().optional().describe('The scientific name of the plant.'),
  diagnosisNotes: z.string().optional().describe('Any notes from the plant health diagnosis, to help tailor the plan.'),
  carePlanMode: z.enum(['basic', 'advanced']).describe("The desired mode for the care plan: 'basic' or 'advanced'."),
  locationClimate: z.string().optional().describe('The user\'s general location or climate (e.g., "temperate, indoor", "tropical, outdoor").'),
});
export type GenerateDetailedCarePlanInput = z.infer<typeof GenerateDetailedCarePlanInputSchema>;

const AIGeneratedTaskSchema = z.object({
    taskName: z.string().describe("The specific name of the care task (e.g., 'Watering', 'Check Soil Moisture', 'Fertilize with Balanced NPK')."),
    taskDescription: z.string().describe("A brief description or specific instructions for the task."),
    suggestedFrequency: z.string().describe("How often the task should be performed. Use formats like 'Daily', 'Weekly', 'Every X Days', 'Ad-hoc'. See prompt examples for exact formats."),
    suggestedTimeOfDay: z.string().describe("When the task should be performed. Use 'All day' or HH:MM format (e.g., '09:00'). See prompt examples."),
    taskLevel: z.enum(['basic', 'advanced']).describe("The level of this task, either 'basic' or 'advanced'.")
});
export type AIGeneratedTask = z.infer<typeof AIGeneratedTaskSchema>;


const GenerateDetailedCarePlanOutputSchema = z.object({
  generatedTasks: z.array(AIGeneratedTaskSchema).describe("A list of specific, actionable care tasks. Aim for 3-5 tasks for 'basic' mode, and 5-8 for 'advanced' mode, covering various aspects of care relevant to the plant and mode."),
  customizableSchedulesPlaceholder: z.string().describe('Placeholder text for customizable schedules feature.'),
  pushNotificationsPlaceholder: z.string().describe('Placeholder text for push notifications feature.'),
  activityTrackingPlaceholder: z.string().describe('Placeholder text for activity completion tracking feature.'),
});
export type GenerateDetailedCarePlanOutput = z.infer<typeof GenerateDetailedCarePlanOutputSchema>;

export async function generateDetailedCarePlan(input: GenerateDetailedCarePlanInput): Promise<GenerateDetailedCarePlanOutput> {
  return generateDetailedCarePlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateDetailedCarePlanPrompt',
  input: {schema: GenerateDetailedCarePlanInputSchema},
  output: {schema: GenerateDetailedCarePlanOutputSchema},
  prompt: `You are an expert horticulturist creating a structured and actionable list of care tasks for a plant.

Plant Information:
- Common Name: {{{plantCommonName}}}
{{#if plantScientificName}}- Scientific Name: {{{plantScientificName}}}{{/if}}
{{#if diagnosisNotes}}- Diagnosis Notes: {{{diagnosisNotes}}}{{/if}}
{{#if locationClimate}}- Location/Climate: {{{locationClimate}}}{{/if}}

Requested Care Plan Mode: {{{carePlanMode}}}

Generate a list of 'generatedTasks'. Each task MUST include:
-   'taskName': A specific name (e.g., "Water thoroughly", "Rotate for even light", "Fertilize with high nitrogen feed").
-   'taskDescription': Clear, concise instructions for performing the task.
-   'suggestedFrequency': How often. Please use one of these formats: 'Daily', 'Weekly', 'Monthly', 'Yearly', 'Ad-hoc', 'Every X Days', 'Every X Weeks', or 'Every X Months'. (e.g., "Every 7 Days" and "Weekly" are valid. "Once a week" or "From 2-4 days" are not valid).
-   'suggestedTimeOfDay': When. Please use 'All day' or HH:MM format (e.g., "09:00", "14:30"). Do not use "Morning" or "Evening".
-   'taskLevel': Must be 'basic' or 'advanced'.

Task Generation Guidelines:
-   If carePlanMode is 'basic', generate 3-5 essential tasks covering fundamental care like watering, lighting, and simple maintenance. These should generally be 'basic' level.
-   If carePlanMode is 'advanced', generate 5-8 tasks, including basic ones plus more detailed tasks for soil management, specific pruning techniques, and tailored fertilization. These can be a mix of 'basic' and 'advanced' levels.
-   Tasks should be actionable and directly relevant to the plant type and diagnosis notes if provided.
-   Consider the location/climate if provided to tailor advice (e.g., watering frequency). If not provided, give general advice for common indoor environments.

Examples of good 'suggestedFrequency' and 'suggestedTimeOfDay':
- Task: Water Peace Lily
  - suggestedFrequency: "Every 7 Days" 
  - suggestedTimeOfDay: "08:00"
- Task: Check for pests
  - suggestedFrequency: "Every 2 Weeks"
  - suggestedTimeOfDay: "All day"
- Task: Mist Fern
  - suggestedFrequency: "Daily"
  - suggestedTimeOfDay: "07:30"

Placeholders for Future Features (include these exact phrases in the output):
-   customizableSchedulesPlaceholder: "Customizable care schedules and task lists will be available in a future update."
-   pushNotificationsPlaceholder: "Push notification reminders for care tasks are coming soon!"
-   activityTrackingPlaceholder: "Activity completion tracking for your care tasks will be implemented in a future version."

Return ONLY the JSON object adhering to the output schema. Do not add any introductory or concluding text outside the JSON structure.
`,
});

const generateDetailedCarePlanFlow = ai.defineFlow(
  {
    name: 'generateDetailedCarePlanFlow',
    inputSchema: GenerateDetailedCarePlanInputSchema,
    outputSchema: GenerateDetailedCarePlanOutputSchema,
  },
  async (input: GenerateDetailedCarePlanInput) => {
    const {output} = await prompt(input);
    if (!output) {
        // Fallback if the model returns null
        console.warn('Generate Detailed Care Plan prompt returned null output. Returning default structure.');
        return {
            generatedTasks: [],
            customizableSchedulesPlaceholder: "Customizable care schedules and task lists will be available in a future update.",
            pushNotificationsPlaceholder: "Push notification reminders for care tasks are coming soon!",
            activityTrackingPlaceholder: "Activity completion tracking for your care tasks will be implemented in a future version.",
        };
    }
    // Ensure generatedTasks is always an array, even if AI fails to provide it
    return {
        ...output,
        generatedTasks: Array.isArray(output.generatedTasks) ? output.generatedTasks : [],
    };
  }
);



'use server';
/**
 * @fileOverview Generates a detailed care plan for a plant, including specific tasks.
 *
 * - generateDetailedCarePlan - A function that generates a detailed plant care plan with tasks.
 * - GenerateDetailedCarePlanInput - The input type for the generateDetailedCarePlan function.
 * - GenerateDetailedCarePlanOutput - The return type for the generateDetailedCarePlan function.
 * - AIGeneratedTask - The type for individual tasks generated by the AI.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateDetailedCarePlanInputSchema = z.object({
  plantCommonName: z.string().describe('The common name of the plant.'),
  plantScientificName: z.string().optional().describe('The scientific name of the plant.'),
  diagnosisNotes: z.string().optional().describe('Any notes from the plant health diagnosis, to help tailor the plan.'),
  carePlanMode: z.enum(['basic', 'advanced']).describe("The desired mode for the care plan: 'basic' or 'advanced'."),
  locationClimate: z.string().optional().describe('The user\'s general location or climate (e.g., "temperate, indoor", "tropical, outdoor").'),
  languageCode: z.string().optional().describe("The desired language for the response (e.g., 'en', 'vi'). Default to English if not provided."),
});
export type GenerateDetailedCarePlanInput = z.infer<typeof GenerateDetailedCarePlanInputSchema>;

const AIGeneratedTaskSchema = z.object({
    taskName: z.string().describe("Specific name of the care task. MUST be in the specified languageCode."),
    taskDescription: z.string().describe("Brief description/instructions for the task. MUST be in the specified languageCode."),
    suggestedFrequency: z.string().describe("How often. Use formats like 'Daily', 'Weekly', 'Every X Days'. See prompt examples."),
    suggestedTimeOfDay: z.string().describe("When. Use 'All day' or HH:MM format. See prompt examples."),
    taskLevel: z.enum(['basic', 'advanced']).describe("The level: 'basic' or 'advanced'.")
});
export type AIGeneratedTask = z.infer<typeof AIGeneratedTaskSchema>;


const GenerateDetailedCarePlanOutputSchema = z.object({
  generatedTasks: z.array(AIGeneratedTaskSchema).describe("A list of specific, actionable care tasks. Aim for 3-5 tasks for 'basic' mode, and 5-8 for 'advanced' mode, covering various aspects of care relevant to the plant and mode."),
  customizableSchedulesPlaceholder: z.string().describe('Placeholder text for customizable schedules feature. MUST be in the specified languageCode.'),
});
export type GenerateDetailedCarePlanOutput = z.infer<typeof GenerateDetailedCarePlanOutputSchema>;

export async function generateDetailedCarePlan(input: GenerateDetailedCarePlanInput): Promise<GenerateDetailedCarePlanOutput> {
  return generateDetailedCarePlanFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateDetailedCarePlanPrompt',
  input: {schema: GenerateDetailedCarePlanInputSchema},
  output: {schema: GenerateDetailedCarePlanOutputSchema},
  prompt: `
Output Language Instructions:
ALL textual output in your response, specifically 'taskName' and 'taskDescription' in the 'generatedTasks' array, and the placeholder texts ('customizableSchedulesPlaceholder'), MUST be in the language specified by '{{languageCode}}'.
- If '{{languageCode}}' is 'vi', respond entirely in Vietnamese.
- If '{{languageCode}}' is 'en' or not provided, respond in English.

Task:
You are an expert horticulturist creating a structured and actionable list of care tasks for a plant, strictly adhering to the Output Language Instructions above.

Plant Information:
- Common Name: {{{plantCommonName}}}
{{#if plantScientificName}}- Scientific Name: {{{plantScientificName}}}{{/if}}
{{#if diagnosisNotes}}- Diagnosis Notes: {{{diagnosisNotes}}}{{/if}}
{{#if locationClimate}}- Location/Climate: {{{locationClimate}}}{{/if}}

Requested Care Plan Mode: {{{carePlanMode}}}

Generate a list of 'generatedTasks'. Each task MUST include:
-   'taskName': A specific name (in '{{languageCode}}', e.g., "Tưới đẫm", "Xoay chậu đều sáng", "Bón phân giàu đạm" if languageCode='vi').
-   'taskDescription': Clear, concise instructions for the task (in '{{languageCode}}').
-   'suggestedFrequency': How often. Please use one of these exact formats: 'Daily', 'Weekly', 'Monthly', 'Yearly', 'Ad-hoc', 'Every X Days', 'Every X Weeks', or 'Every X Months' (e.g., "Every 7 Days" or "Weekly"). Do not use "Once a week" or "From 2-4 days".
-   'suggestedTimeOfDay': When. Please use 'All day' or HH:MM format (e.g., "09:00", "14:30"). Do not use "Morning" or "Evening".
-   'taskLevel': Must be 'basic' or 'advanced'.

Task Generation Guidelines:
-   If carePlanMode is 'basic', generate 3-5 essential tasks ('basic' level).
-   If carePlanMode is 'advanced', generate 5-8 tasks (mix of 'basic' and 'advanced').
-   Tasks should be actionable and relevant. Consider location/climate.

Placeholders for Future Features (generate these in '{{languageCode}}'):
-   customizableSchedulesPlaceholder: (Example if 'vi': "Lịch chăm sóc và danh sách công việc tùy chỉnh sẽ có trong bản cập nhật tới.")

Return ONLY the JSON object adhering to the output schema. Do not add any introductory or concluding text outside the JSON structure.
`,
});

const generateDetailedCarePlanFlow = ai.defineFlow(
  {
    name: 'generateDetailedCarePlanFlow',
    inputSchema: GenerateDetailedCarePlanInputSchema,
    outputSchema: GenerateDetailedCarePlanOutputSchema,
  },
  async (input: GenerateDetailedCarePlanInput) => {
    const {output} = await prompt(input);
    const lang = input.languageCode === 'vi' ? 'vi' : 'en';

    const defaultCustomizablePlaceholder = lang === 'vi' ? "Lịch chăm sóc và danh sách công việc tùy chỉnh sẽ có trong bản cập nhật tới." : "Customizable care schedules and task lists will be available in a future update.";

    if (!output) {
        console.warn('Generate Detailed Care Plan prompt returned null output. Returning default structure.');
        return {
            generatedTasks: [],
            customizableSchedulesPlaceholder: defaultCustomizablePlaceholder,
        };
    }
    
    return {
        ...output,
        generatedTasks: Array.isArray(output.generatedTasks) ? output.generatedTasks : [],
        customizableSchedulesPlaceholder: output.customizableSchedulesPlaceholder || defaultCustomizablePlaceholder
    };
  }
);


    